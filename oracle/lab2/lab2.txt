1. Построить две таблицы STUDENTS и GROUPS реализующих соответственно справочник студентов и справочник групп

CREATE TABLE Students (
    id NUMBER PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    group_id NUMBER NOT NULL
);

CREATE TABLE Groups (
    id NUMBER PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    c_val NUMBER NOT NULL
);


2. Реализовать триггеры для таблиц задания 1 проверку целостности (проверка на уникальность полей ID), генерацию автоинкрементного ключа и проверку уникальности для поля GROUP.NAME

CREATE OR REPLACE TRIGGER is_student_id_unique
BEFORE INSERT OR UPDATE OF id ON Students
FOR EACH ROW
DECLARE
    count_of_id NUMBER;
BEGIN
    SELECT COUNT(*) INTO count_of_id
    FROM Students WHERE id = :NEW.id;

    IF count_of_id > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ID is not unique students table');
    END IF;
END;

CREATE OR REPLACE TRIGGER is_group_id_unique
BEFORE INSERT OR UPDATE OF id ON Groups
FOR EACH ROW
DECLARE
    count_of_id NUMBER;
BEGIN
    SELECT COUNT(*) INTO count_of_id
    FROM Groups WHERE id = :NEW.id;

    IF count_of_id > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ID is not unique groups table');
    END IF;
END;


CREATE OR REPLACE TRIGGER autoincrement_student_id
BEFORE INSERT ON Students
FOR EACH ROW
BEGIN
    IF :NEW.id IS NULL THEN
        SELECT COALESCE(MAX(id), 0) + 1
        INTO :NEW.id FROM Students;
    END IF;
END;

CREATE OR REPLACE TRIGGER autoincrement_group_id
BEFORE INSERT ON Groups
FOR EACH ROW
BEGIN
    IF :NEW.id IS NULL THEN
        SELECT COALESCE(MAX(id), 0) + 1
        INTO :NEW.id FROM Groups;
    END IF;
END;

CREATE OR REPLACE TRIGGER is_group_name_unique
BEFORE INSERT OR UPDATE OF name ON Groups
FOR EACH ROW
DECLARE
    name_is_exist NUMBER;
BEGIN
    SELECT COUNT(*) INTO name_is_exist
    FROM Groups WHERE name = :NEW.name;

    IF name_is_exist > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Name is not unique in Groups');
    END IF;
END;


3. Реализовать триггер реализующий Foreign Key с каскадным удалением между таблицами STUDENTS и GROUPS.

CREATE OR REPLACE TRIGGER cascade_delete_student
BEFORE DELETE ON Groups
FOR EACH ROW
BEGIN
    DELETE FROM Students WHERE group_id = :OLD.id;
END;


4. Реализовать триггер реализующий журналирование всех действий над данными таблицы STUDENTS.

CREATE TABLE Students_Log (
    log_id NUMBER PRIMARY KEY,
    action VARCHAR2(50),
    student_id NUMBER,
    student_name VARCHAR2(100),
    group_id NUMBER,
    log_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE TRIGGER student_logging
AFTER INSERT OR UPDATE OR DELETE ON Students
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO Students_Log (action, student_id, student_name, group_id)
        VALUES ('INSERT', :NEW.id, :NEW.name, :NEW.group_id);
    ELSIF UPDATING THEN
        INSERT INTO Students_Log (action, student_id, student_name, group_id)
        VALUES ('UPDATE', :OLD.id, :OLD.name, :OLD.group_id);
    ELSIF DELETING THEN
        INSERT INTO Students_Log (action, student_id, student_name, group_id)
        VALUES ('DELETE', :OLD.id, :OLD.name, :OLD.group_id);
    END IF;
END;
