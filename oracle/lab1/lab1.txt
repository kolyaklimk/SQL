1.Создайте таблицу MyTable(id number, val number)

create table MY_TABLE
(
    id number,
    val number
)



2. Напишите анонимный блок, который записывает в таблицу MyTable 10 000 целых.

случайных записей.

DECLARE
    rand_num NUMBER;
BEGIN
    FOR i IN 1..10000 LOOP
        rand_num := DBMS_RANDOM.VALUE(1, 99);
        INSERT INTO My_Table(id, val) VALUES (i, ROUND(rand_num));
    END LOOP;
END;



3. Напишите собственную функцию, которая выводит TRUE если четных 
значений val в таблице MyTable больше, FALSE если больше нечетных 
значений и EQUAL если количество четных и нечетных равно.

create or replace function even_odd
return VARCHAR2
is
    even_count number;
    odd_count number;
begin
    select COUNT(val) into even_count from my_table where mod(val, 2) = 0;
    select COUNT(val) into odd_count from my_table where mod(val, 2) = 1;
    
    if even_count > odd_count then
        return 'TRUE';
    elsif even_count < odd_count then
        return 'FALSE';
    else
        return 'EQUAL';
    end if;
end;


вызов
select even_odd() from dual



4. Напишите функцию, которая по введенному значению ID, сгенерирует и выведет в консоль текстовое значение команды insert для вставки указанной строки.

CREATE OR REPLACE FUNCTION insert_generate(find_id NUMBER) RETURN VARCHAR2 IS
    command VARCHAR2(999);
BEGIN
    SELECT 'INSERT INTO my_table (id, val) VALUES (' || find_id || ', ' || val || ')' INTO command FROM my_table WHERE id = find_id;
    RETURN command;
    
    EXCEPTION
    when NO_DATA_FOUND then
        return 'Id not found';
END;

вызов
select insert_generate(123) from dual



5. Написать процедуры, реализующие DML операции (INSERT, UPDATE, DELETE) для указанной таблицы.

CREATE OR REPLACE PROCEDURE insert_data(id_insert NUMBER, val_insert NUMBER) AS
BEGIN
    INSERT INTO my_table (id, val) VALUES (id_insert, val_insert);
    COMMIT;
END;


CREATE OR REPLACE PROCEDURE delete_data(id_delete NUMBER) AS
BEGIN
    DELETE FROM my_table WHERE id = id_delete;
    COMMIT;
END;


CREATE OR REPLACE PROCEDURE update_data(id_update NUMBER, val_update NUMBER) AS
BEGIN
    UPDATE my_table SET val = val_update WHERE id = id_update;
    COMMIT;
END;


вызов.
DECLARE
    id_value NUMBER := 11111; 
    val_value NUMBER := 42; 
BEGIN
    insert_data(id_value, val_value);
END;



6. Создайте функцию, вычисляющую общее вознаграждение за год. На вход функции подаются значение месячной зарплаты и процент годовых премиальных. В общем случае общее вознаграждение= (1+ процент годовых премиальных)*12* значение месячной зарплаты. При этом предусмотреть что процент вводится как целое число, и требуется преобразовать его к дробному. Предусмотреть защиту от ввода некорректных данных.

CREATE OR REPLACE FUNCTION annual_remuneration(salary NUMBER, percent INTEGER) RETURN NUMBER
IS
BEGIN
    IF salary IS NULL OR percent IS NULL OR percent < 0 OR salary < 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Incorrect data');
    END IF;

    RETURN (1 + percent / 100.0) * 12 * salary;
        
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, SQLERRM);
END;

